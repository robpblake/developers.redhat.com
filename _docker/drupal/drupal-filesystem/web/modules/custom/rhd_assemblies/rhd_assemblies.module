<?php

/**
 * @file
 * Contains rhd_assemblies.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function rhd_assemblies_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the rhd_assemblies module.
    case 'help.page.rhd_assemblies':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom assemblies for RHD') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function rhd_assemblies_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'rhd_assemblies');

  // Assembly types with a default template defined in this module.
  $types = [
    'blog_posts',
  ];

  foreach ($types as $type) {
    if (isset($theme_registry['assembly']) && !isset($theme_registry['assembly__' . $type])) {
      $theme_registry['assembly__' . $type] = $theme_registry['assembly'];
      $theme_registry['assembly__' . $type]['template'] = 'assembly--' . str_replace('_', '-', $type);
      $theme_registry['assembly__' . $type]['theme_path'] = $path;
      $theme_registry['assembly__' . $type]['path'] = $path . '/templates';
    }
  }
}

/**
 * Implements hook_theme().
 */
function rhd_assemblies_theme($existing, $type, $theme, $path) {
  $theme = [];

  // Registers a custom template and variables for Wordpress Post Teaser.
  $theme['wordpress_post_teaser'] = [
    'template' => 'wordpress-post-teaser',
    'variables' => [
      'post' => NULL,
      'media' => NULL,
      'categories' => NULL,
      'date' => NULL,
    ],
  ];

  // Registers a custom template and variables for Wordpress Post Teaser.
  $theme['wordpress_post_tile'] = [
    'template' => 'wordpress-post-tile',
    'variables' => [
      'post' => NULL,
      'media' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_entity_presave().
 */
function rhd_assemblies_entity_presave(EntityInterface $entity) {
  // The entity is either a Node Reference or Wordpress Post Reference assembly.
  if ($entity->getEntityTypeId() == 'assembly' && in_array($entity->bundle(), ['node_reference', 'wordpress_post_reference'])) {

    // Node Reference assembly.
    if ($entity->bundle() == 'node_reference') {
      // Set the name of the Node Reference assembly using the title/label of
      // referenced node.
      $field = $entity->get('field_node_reference')->getValue();
      $node_id = reset($field)['target_id'];
      $node = Node::load($node_id);
      $title = $node->label();
      $entity->set('name', $title);
    }

    // Wordpress Post Reference assembly.
    if ($entity->bundle() == 'wordpress_post_reference') {
      // Set the name of the Wordpress Post Reference assembly using the
      // title/label of the reference Wordpress post.
      $field = $entity->get('field_post_reference')->getValue();
      $title = reset($field)['title'];
      $entity->set('name', $title);
    }
  }
}

/**
 * Implements hook_preprocess_assembly().
 */
function rhd_assemblies_preprocess_assembly(&$variables) {
  // Retrieve the parent entity of this assembly.
  $parent = $variables['elements']['#parent'];

  if ($parent) {
    // Make assembly ID match pattern used for on page navigation.
    $id = $variables['elements']['#assembly']->id();
    $css_id = Html::cleanCssIdentifier('assembly-' . $parent['field_name'] . '-' . $id);
    $variables['attributes']->offsetSet('id', $css_id);
  }
}

/**
 * Implements hook_form_alter().
 */
function rhd_assemblies_form_alter(array &$form, FormStateInterface &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_product_form':
    case 'node_product_edit_form':
      $form['#validate'][] = 'product_url_name_validation';
      break;
  }
}

/**
 * Custom validation hook for the Product node and node edit forms.
 *
 * Verifies that the field_url_product_name submitted in the $form_state is not
 * already being used by an existing Product node. This is necessary because if
 * a duplicate field_url_product_name exists, there will be a routing conflict.
 */
function product_url_name_validation(array &$form, FormStateInterface &$form_state) {
  // The value of field_url_product_name attempting to be submitted to this
  // node product form.
  $url_product_name = $form_state->getValue('field_url_product_name')[0]['value'];
  $form_nid = $form_state->getFormObject()->getEntity()->id();

  // This query will try to find an existing Product node that has a value
  // of $url_product_name set for the field_url_product_name field.
  $query_nids = \Drupal::entityQuery('node')
    ->condition('type', 'product')
    ->condition('field_url_product_name', $url_product_name)
    ->execute();

  foreach ($query_nids as $query_nid) {
    if ($query_nid != $form_nid) {
      // If an existing Product is already using the value provided for
      // field_url_product_name in $form_state, then we will set an error on
      // the field.
      $form_state->setErrorByName(
        'field_url_product_name',
        t('The value you entered for URL Product Name is already used by an existing Product. This field must be unique across all Products to prevent routing conflicts.')
      );
    }
  }
}
