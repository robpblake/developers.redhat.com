diff --git a/openid_connect.module b/openid_connect.module
index ec7a465..3e8a4f8 100644
--- a/openid_connect.module
+++ b/openid_connect.module
@@ -379,6 +379,11 @@ function openid_connect_disconnect_account($account, $client_name) {
  *   The sub, or FALSE if there was an error.
  */
 function openid_connect_extract_sub(array $user_data, array $userinfo) {
+
+  $logger = \Drupal::logger('openid_connect');
+  $logger->error('user_data in extract_sub ' . print_r($user_data, TRUE));
+  $logger->error('userinfo in extract_sub ' . print_r($userinfo, TRUE));
+
   if (!isset($user_data['sub']) && !isset($userinfo['sub'])) {
     return FALSE;
   }
@@ -409,19 +414,25 @@ function openid_connect_complete_authorization($client, array $tokens, &$destina
     throw new \RuntimeException('User already logged in');
   }
 
+    $logger = \Drupal::logger('openid_connect');
+
   /* @var \Drupal\openid_connect\Authmap $authmap */
-  $authmap = \Drupal::service('openid_connect.authmap');
-  $user_data = $client->decodeIdToken($tokens['id_token']);
-  $userinfo = $client->retrieveUserInfo($tokens['access_token']);
+    $authmap = \Drupal::service('openid_connect.authmap');
+    $user_data = $client->decodeIdToken($tokens['id_token']);
+    $userinfo = $client->retrieveUserInfo($tokens['access_token']);
 
-  $context = [
+    $logger->error('user_data after client->decodeIdToken: ' . print_r($user_data, TRUE));
+    $logger->error('userInfo after client->retrieveUserInfo: ' . print_r($userinfo, TRUE));
+
+    $context = [
     'user_data' => $user_data,
   ];
-  \Drupal::moduleHandler()->alter('openid_connect_userinfo', $userinfo, $context);
+    \Drupal::moduleHandler()->alter('openid_connect_userinfo', $userinfo, $context);
 
-  $logger = \Drupal::logger('openid_connect');
+    $logger->error('user_data after alter: ' . print_r($user_data, TRUE));
+    $logger->error('userInfo after alter: ' . print_r($userinfo, TRUE));
 
-  if ($userinfo && empty($userinfo['email'])) {
+    if ($userinfo && empty($userinfo['email'])) {
     $message = 'No e-mail address provided by @provider';
     $variables = ['@provider' => $client->getPluginId()];
     $logger->error($message . ' (@code @error). Details: @details', $variables);
@@ -566,17 +577,24 @@ function openid_connect_connect_current_user($client, array $tokens) {
     throw new \RuntimeException('User not logged in');
   }
 
+  $logger = \Drupal::logger('openid_connect');
+
   /* @var \Drupal\openid_connect\Authmap $authmap */
   $authmap = \Drupal::service('openid_connect.authmap');
   $user_data = $client->decodeIdToken($tokens['id_token']);
   $userinfo = $client->retrieveUserInfo($tokens['access_token']);
 
+  $logger->error('user_data after client->decodeIdToken: ' . print_r($user_data, TRUE));
+  $logger->error('userInfo after client->retrieveUserInfo: ' . print_r($userinfo, TRUE));
+
   $context = [
     'user_data' => $user_data,
   ];
   \Drupal::moduleHandler()->alter('openid_connect_userinfo', $userinfo, $context);
 
-  $logger = \Drupal::logger('openid_connect');
+  $logger->error('user_data after alter: ' . print_r($user_data, TRUE));
+  $logger->error('userInfo after alter: ' . print_r($userinfo, TRUE));
+
   $provider_param = ['@provider' => $client->getPluginId()];
 
   if ($userinfo && empty($userinfo['email'])) {
diff --git a/src/Plugin/OpenIDConnectClientBase.php b/src/Plugin/OpenIDConnectClientBase.php
index 5575c84..6bb77c5 100644
--- a/src/Plugin/OpenIDConnectClientBase.php
+++ b/src/Plugin/OpenIDConnectClientBase.php
@@ -211,6 +211,9 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    */
   public function retrieveTokens($authorization_code) {
     // Exchange `code` for access token and ID token.
+    $this->loggerFactory->get('openid_connect_' . $this->pluginId)
+          ->error("Exchanging authorization code [". $authorization_code . "] for tokens...");
+
     $language_none = \Drupal::languageManager()
       ->getLanguage(LanguageInterface::LANGCODE_NOT_APPLICABLE);
     $redirect_uri = Url::fromRoute(
@@ -238,6 +241,9 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       ],
     ];
 
+    $this->loggerFactory->get('openid_connect_' . $this->pluginId)
+          ->error("Token request body: ". print_r($request_options, TRUE) . "");
+
     /* @var \GuzzleHttp\ClientInterface $client */
     $client = $this->httpClient;
     try {
@@ -249,12 +255,20 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
         'id_token' => isset($response_data['id_token']) ? $response_data['id_token'] : NULL,
         'access_token' => isset($response_data['access_token']) ? $response_data['access_token'] : NULL,
       ];
+
+      $this->loggerFactory->get('openid_connect_' . $this->pluginId)
+            ->error("id_token is [" . $tokens['id_token'] . "]\n, access_token is [" . $tokens['access_token'] . "]");
+
       if (array_key_exists('expires_in', $response_data)) {
         $tokens['expire'] = REQUEST_TIME + $response_data['expires_in'];
       }
       if (array_key_exists('refresh_token', $response_data)) {
         $tokens['refresh_token'] = $response_data['refresh_token'];
       }
+
+      $this->loggerFactory->get('openid_connect_' . $this->pluginId)
+            ->error("Token response: '" . print_r($tokens, TRUE) . "'");
+
       return $tokens;
     }
     catch (Exception $e) {
@@ -295,12 +309,17 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       ],
     ];
     $endpoints = $this->getEndpoints();
+    $this->loggerFactory->get('openid_connect_' . $this->pluginId)
+          ->error("retrieveUserInfo with access_token [" . $access_token. "]");
 
     $client = $this->httpClient;
     try {
       $response = $client->get($endpoints['userinfo'], $request_options);
       $response_data = (string) $response->getBody();
 
+      $this->loggerFactory->get('openid_connect_' . $this->pluginId)
+            ->error("UserInfo response: " . print_r(json_decode($response_data, TRUE),TRUE));
+
       return json_decode($response_data, TRUE);
     }
     catch (Exception $e) {
