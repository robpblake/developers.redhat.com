properties([
    disableConcurrentBuilds(),
    [$class: 'HudsonNotificationProperty', enabled: false],
    [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    [$class: 'ParametersDefinitionProperty', parameterDefinitions: [[$class: 'hudson.model.StringParameterDefinition', defaultValue: '', description: 'The SHA256 of the Drupal Docker image used to build the data images.', name: 'DRUPAL_IMAGE_SHA256']]],
    [$class: 'ThrottleJobProperty', categories: [], limitOneJobWithMatchingParams: false, maxConcurrentPerNode: 0, maxConcurrentTotal: 0, paramsToUseForLimit: '', throttleEnabled: false, throttleOption: 'project']
])

def failure
def built = false
def drupalImage = "registry.paas.redhat.com/rhdp/developer-drupal@sha256:${params.DRUPAL_IMAGE_SHA256}"
def dataBuildName = "docker-registry.engineering.redhat.com/developers/drupal-data:$BUILD_NUMBER"
def dataBuildNameLatest = 'docker-registry.engineering.redhat.com/developers/drupal-data:latest'

node('cic-rhd-01') {
    try {
        timeout(30) {
            stage('Checkout SCM') {
                 checkout scm
            }

            stage('Pull the Drupal Docker Image') {
                 sh "docker pull ${drupalImage}"
            }

            withEnv(["DRUPAL_IMAGE=${drupalImage}"]) {
                 dir('_docker/drupal/data-image') {

                     stage('Bootstrap the environment') {
                         sh 'docker-compose run --rm bootstrap_env'
                     }

                     stage('Bootstrap Drupal') {
                         sh 'docker-compose run --rm bootstrap_drupal'
                     }

                     stage('Backup Drupal') {
                         sh 'docker-compose run --rm backup_drupal'
                         sh 'sudo chown -R vagrant:vagrant ./work'
                     }

                     stage('Build Docker Image') {
                         sh "docker build -t $dataBuildName -t $dataBuildNameLatest ."
                         built = true
                     }

                     stage('Push Docker Image to Registry') {
                         sh "docker push $dataBuildName"
                         sh "docker push $dataBuildNameLatest"
                     }
                 }
            }
        }
    } catch(e) {
        failure = e
        currentBuild.result == 'FAILURE'
    } finally {
        stage('Clean up') {
            dir('_docker/drupal/data-image') {
                sh 'docker-compose down -v'
                sh 'sudo rm -rf ./drupal-workspace'
                sh 'sudo rm -rf ./work'
            }

            sh "docker rmi -f ${drupalImage}"
            if(built) {
                sh "docker rmi -f ${dataBuildName} ${dataBuildNameLatest}"
            }
        }

        if(failure != null) {
            throw failure
        }

    }
}